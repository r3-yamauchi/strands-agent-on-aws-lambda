name: Deploy

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
      memory:
        description: 'Lambda memory (MB)'
        required: false
        default: '1024'
      timeout:
        description: 'Lambda timeout (minutes)'
        required: false
        default: '10'

env:
  PYTHON_VERSION: '3.11'

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ vars.AWS_REGION }}
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install CDK
        run: npm install -g aws-cdk
      
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --dev
      
      - name: Build Lambda Layer
        run: python build_layer.py
      
      - name: Set environment variables
        run: |
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_ENV
          echo "LAMBDA_MEMORY=${{ github.event.inputs.memory }}" >> $GITHUB_ENV
          echo "LAMBDA_TIMEOUT=${{ github.event.inputs.timeout }}" >> $GITHUB_ENV
          
          # 環境別の設定
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "ENABLE_AUTH=true" >> $GITHUB_ENV
            echo "ALLOWED_ORIGINS=${{ vars.PROD_ALLOWED_ORIGINS }}" >> $GITHUB_ENV
            echo "ENABLE_XRAY=true" >> $GITHUB_ENV
          else
            echo "ENABLE_AUTH=false" >> $GITHUB_ENV
            echo "ALLOWED_ORIGINS=*" >> $GITHUB_ENV
            echo "ENABLE_XRAY=false" >> $GITHUB_ENV
          fi
      
      - name: CDK Bootstrap (if needed)
        run: |
          source .venv/bin/activate
          cdk bootstrap aws://${{ secrets.AWS_ACCOUNT_ID }}/${{ vars.AWS_REGION }} || true
      
      - name: CDK Deploy
        run: |
          source .venv/bin/activate
          cdk deploy \
            --require-approval never \
            --context lambda_memory=${{ env.LAMBDA_MEMORY }} \
            --context lambda_timeout=${{ env.LAMBDA_TIMEOUT }} \
            --context lambda_function_name=strands-agent-${{ github.event.inputs.environment }}
      
      - name: Get Function URL
        id: get-url
        run: |
          FUNCTION_NAME=strands-agent-${{ github.event.inputs.environment }}
          URL=$(aws lambda get-function-url-config --function-name $FUNCTION_NAME --query 'FunctionUrl' --output text)
          echo "function_url=$URL" >> $GITHUB_OUTPUT
      
      - name: Run smoke test
        run: |
          FUNCTION_URL="${{ steps.get-url.outputs.function_url }}"
          echo "Testing function at: $FUNCTION_URL"
          
          RESPONSE=$(curl -s -X POST "$FUNCTION_URL" \
            -H 'Content-Type: application/json' \
            -d '{"prompt": "Hello, are you working?"}')
          
          echo "Response: $RESPONSE"
          
          # Check if response contains success
          if echo "$RESPONSE" | grep -q '"success":true'; then
            echo "✅ Smoke test passed!"
          else
            echo "❌ Smoke test failed!"
            exit 1
          fi
      
      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << EOF
          # 🚀 Deployment Summary
          
          ## Environment: ${{ github.event.inputs.environment }}
          
          | Parameter | Value |
          |-----------|-------|
          | Function URL | ${{ steps.get-url.outputs.function_url }} |
          | Memory | ${{ github.event.inputs.memory }} MB |
          | Timeout | ${{ github.event.inputs.timeout }} minutes |
          | Region | ${{ vars.AWS_REGION }} |
          | Auth Enabled | ${{ env.ENABLE_AUTH }} |
          | X-Ray Enabled | ${{ env.ENABLE_XRAY }} |
          
          ## Next Steps
          
          1. Test the function URL
          2. Monitor CloudWatch Logs
          3. Check X-Ray traces (if enabled)
          EOF