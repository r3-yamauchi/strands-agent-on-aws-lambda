name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: '3.11'
  AWS_DEFAULT_REGION: 'us-east-1'

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort
      
      - name: Run flake8
        run: flake8 lambda/ tests/ --config=tox.ini
      
      - name: Check black formatting
        run: black --check lambda/ tests/
      
      - name: Check import sorting
        run: isort --check-only lambda/ tests/

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Install dependencies
        run: |
          uv venv
          source .venv/bin/activate
          uv sync --dev
      
      - name: Run unit tests
        run: |
          source .venv/bin/activate
          pytest tests/ -m "not integration" -v --cov=lambda --cov-report=xml
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          fail_ci_if_error: true
          token: ${{ secrets.CODECOV_TOKEN }}

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install security tools
        run: |
          pip install bandit[toml] safety
      
      - name: Run Bandit
        run: bandit -r lambda/ -ll -f json -o bandit-report.json
      
      - name: Run Safety check
        run: safety check --json --output safety-report.json
        continue-on-error: true
      
      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  build:
    name: Build Lambda Layer
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install uv
        run: |
          curl -LsSf https://astral.sh/uv/install.sh | sh
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH
      
      - name: Build Lambda Layer
        run: |
          python build_layer.py
      
      - name: Check Layer Size
        run: |
          LAYER_SIZE=$(du -sb lambda_layer | cut -f1)
          MAX_SIZE=$((250 * 1024 * 1024))  # 250MB
          echo "Layer size: $LAYER_SIZE bytes"
          if [ $LAYER_SIZE -gt $MAX_SIZE ]; then
            echo "Error: Lambda layer exceeds 250MB limit"
            exit 1
          fi
      
      - name: Upload Lambda Layer artifact
        uses: actions/upload-artifact@v4
        with:
          name: lambda-layer
          path: lambda_layer/
          retention-days: 7

  validate-cdk:
    name: Validate CDK
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install CDK
        run: npm install -g aws-cdk
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      
      - name: Install Python dependencies
        run: |
          pip install -r requirements-dev.txt
      
      - name: CDK Synth
        run: |
          cdk synth --context lambda_memory=1024 --context lambda_timeout=10
      
      - name: Validate CloudFormation template
        run: |
          pip install cfn-lint
          cfn-lint cdk.out/*.template.json